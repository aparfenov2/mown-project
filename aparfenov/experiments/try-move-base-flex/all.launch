<launch>
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}] [${node}]: ${message}"/>

    <arg name="rviz" default="false" />
    <arg name="loca" default="false" />
    <arg name="teleop" default="false" />
    <arg name="sim" default="false" />
    <arg name="segm" default="false" />
    <arg name="segm_net" default="false" />
    <arg name="planning" default="false"/>
    <arg name="mb" default="false" />
    <arg name="paused" default="false" />
    <arg name="world" default="agriculture" />
    <arg name="robot" default="turtlebot" />
    <arg name="cmd_vel_topic" value="/mobile_base/commands/velocity" if="$(eval robot == 'turtlebot')" />
    <arg name="odom_topic" value="/odom" if="$(eval robot == 'turtlebot')" />
    <arg name="cmd_vel_topic" value="/cmd_vel" if="$(eval robot == 'turtlebot3')" />
    <arg name="odom_topic" value="/odom" if="$(eval robot == 'turtlebot3')" />
    <!-- <arg name="cmd_vel_topic" value="/engix_velocity_controller/cmd_vel" if="$(eval robot == 'ya_model')" />
    <arg name="odom_topic" value="/engix_velocity_controller/odom" if="$(eval robot == 'ya_model')" /> -->
    <arg name="cmd_vel_topic" value="/cmd_vel" if="$(eval robot == 'ya_model')" />
    <arg name="odom_topic" value="/odom" if="$(eval robot == 'ya_model')" />
    <arg name="use_sim_time_in_gazebo" value="true"/>
    <arg name="base_frame" value="base_link" if="$(eval robot == 'ya_model')" />
    <arg name="rosbridge" default="false" />
    <arg name="rosbridge_port" default="8088" />
    <arg name="command_panel" default="false" />
    <!-- rtabmap is supposed to be used in sim mode only to provide global merged pointcloud. In real robot ZED2 already provides the cloud. -->
    <arg name="rtabmap" default="false" />
    <arg name="backend" default="false" />

    <!-- sim -->
    <group if="$(arg sim)">
        <arg name="publish_tf" default="1"/>

        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="use_sim_time" value="$(arg use_sim_time_in_gazebo)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="debug" value="false"/>
            <arg name="gui" value="true"/>
            <arg name="world_name" value="$(find my_utils_common)/worlds/$(arg world).world"/>
        </include>


        <group if="$(eval robot == 'ya_model')">
            <!-- <arg name="robot_namespace" default="/"/> -->
            <include file="$(find engix_description)/launch/description.launch" />

            <!-- <include file="$(find engix_gazebo)/launch/spawn_engix.launch"/> -->

            <!-- Load controller configuration -->
            <!-- <rosparam command="load" file="$(find engix_control)/config/controller.yaml" /> -->

            <!-- Spawn controllers -->
            <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="engix_joint_publisher engix_velocity_controller">
            </node>

            <!-- <node name="message_to_tf" pkg="message_to_tf" type="message_to_tf">
                <param name="odometry_topic" value="ground_truth/state"/>
                <param name="frame_id" value="odom"/>
                <param name="child_frame_id" value="base_link"/>
            </node> -->
        </group>

        <group if="$(eval robot == 'turtlebot')">
            <arg name="urdf_file" default="$(find xacro)/xacro '$(find tb_gazebo_description)/robots/kobuki_hexagons_kinect.urdf.xacro' publish_tf:=$(arg publish_tf)"/>
            <param name="robot_description" command="$(arg urdf_file)"/>
        </group>

        <group if="$(eval robot == 'turtlebot3')">
            <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_waffle.urdf.xacro publish_tf:=$(arg publish_tf)" />
        </group>

        <!-- Gazebo model spawner -->
        <group if="$(eval world == 'empty')">
            <node args="-urdf -x 0 -y 0 -z 0 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'playpen')">
            <node args="-urdf -x 0 -y 0 -z 0 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'agriculture')">
            <node args="-urdf -x 0 -y 0 -z 0.5 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'yosemite')">
            <node args="-urdf -x 0 -y 0 -z 0.5 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'turtletown')">
            <node args="-urdf -x 5.5 -y -5.7 -z 1.2 -Y 3.14 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'baylands')">
            <node args="-urdf -x 0 -y 0 -z 0.21 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" type="double" value="30.0"/>
        </node>
        <!-- <node args="/mobile_base/sensors/imu_data /mobile_base/sensors/imu_data_raw" name="imu_relay" pkg="topic_tools" type="relay"/> -->
    </group>
    <!-- rviz -->
    <group if="$(arg rviz)">
        <node args="-d /cdir/cfg.rviz" name="rviz" pkg="rviz" type="rviz" respawn="true"/>
    </group>
    <!-- teleop -->
    <group if="$(arg teleop)">
        <node name="teleop" output="screen" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py">
            <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
        </node>
    </group>


    <!-- segm_net -->
    <group if="$(arg segm_net)">
        <node name="segmentation_node" pkg="ddrnet" type="ddrnet" output="screen">
            <param name="weights_file" value="$(find ddrnet)/model/DDRNet_CS.engine" />
            <remap from="camera/image" to="/camera/rgb/image_raw" />
        </node>
    </group>

    <!-- segm, depends on segm_net -->
    <group if="$(arg segm)">

        <node pkg="nodelet" type="nodelet" name="pcl_proc" args="manager" output="screen"/>

        <!-- register depth image -->
        <node pkg="nodelet" type="nodelet" name="point_cloud2_register" args="load depth_image_proc/register pcl_proc" respawn="false" output="screen">
            <remap from="/rgb/camera_info" to="/camera/rgb/camera_info" />
            <remap from="/depth/camera_info" to="/camera/depth/camera_info" />
            <remap from="/depth/image_rect" to="/camera/depth/image_raw" />
        </node>

        <!-- registered depth to pcl rgb -->
        <node pkg="nodelet" type="nodelet" name="point_cloud2_pcl" args="load depth_image_proc/point_cloud_xyzrgb pcl_proc" respawn="false" output="screen">
            <!-- depth input: depth_registered/image_rect -->
            <remap from="/rgb/image_rect_color" to="/segmentation_node/mask_color" />
            <remap from="/rgb/camera_info" to="/camera/rgb/camera_info" />

            <remap from="depth_registered/points" to="/pcl_proc/points2" />
        </node>
    </group>


    <!-- move_base -->
    <group if="$(arg mb)">
<!--
    <param name="/planner/topics/mapping_server/segm_points" type="str" value="/pcl_proc/points2"  />
    <param name="/planner/topics/mapping_server/lidar" type="str" value="/velodyne_points/new"  />
    <param name="/planner/topics/mapping_server/costmap" type="str" value="/costmap_node/costmap/costmap"  />
    <param name="/planner/topics/mapping_server/gridmap" type="str" value="/costmap_node/costmap/gridmap"  />

    <node pkg="mapping" type="map_server" name="mapping"   output="screen">
        <param name="fixed_frame_id" type="str"    value="odom" />
        <param name="resolution"     type="double" value="0.1"  />
        <param name="max_range"      type="double" value="40.0"  />
        <param name="hit_logprob"       type="double" value="10"  />
        <param name="miss_logprob"      type="double" value="1"  />
        <param name="max_logprob"       type="double" value="100"  />
        <param name="min_logprob"      type="double" value="0"  />
    </node>
 -->

 <!-- Static obstacles map, projecting on DWA map only -->
  <node pkg="map_server" type="map_server" respawn="false" name="map_server" output="screen" args="/cdir/maps/testmap.yaml">
    <param name="frame_id" value="odom" />
  </node>

<!-- for debugging DWA node -->
  <node name="move_base_legacy_relay" pkg="pkg1" type="move_base_legacy_relay.py">
    <rosparam file="/cdir/params/default_planner.yaml" command="load"/>
  </node>

<arg name="robot_radius" default="0.5"/>
<arg name="tool_radius" default="0.3"/>

<!-- Launch coverage progress tracking -->
<!-- <node pkg="tf" type="static_transform_publisher" name="map_to_coveragemap" args="$(arg coverage_area_offset) map coverage_map 100" /> -->
<node pkg="pkg1" type="coverage_progress" name="coverage_progress">
    <param name="~target_area/x" value="40" />
    <param name="~target_area/y" value="40" />
    <param name="~coverage_resolution" value="0.1" />
    <param name="~coverage_radius" value="$(arg tool_radius)" />
    <remap from="reset" to="coverage_progress/reset" />
    <param name="~map_frame" value="odom"/>
</node>

<!-- SpiralSTC node -->
<!-- <node pkg="mbf_costmap_nav" type="mbf_costmap_nav" respawn="false" name="SpiralSTC_node" output="screen" required="true" clear_params="true" launch-prefix="xterm -e gdbserver :1234"> -->
<node pkg="mbf_costmap_nav" type="mbf_costmap_nav" respawn="false" name="SpiralSTC_node" output="screen" required="true" clear_params="true" >
    <rosparam file="/cdir/params/spiral_mb_flex_params.yaml" command="load" />
    <rosparam file="/cdir/params/spiral_global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="/cdir/params/spiral_local_costmap_params.yaml" command="load" ns="local_costmap" />
    <param name="SpiralSTC/robot_radius" value="$(arg robot_radius)"/>
    <param name="SpiralSTC/tool_radius" value="$(arg tool_radius)"/>
    <param name="SpiralSTC/coverage_map_topic" value="/coverage_grid"/>

    <remap from="cmd_vel" to="/cmd_vel_stub"/>
    <remap from="odom" to="$(arg odom_topic)"/>
</node>

<!-- DWA node -->
<node pkg="mbf_costmap_nav" type="mbf_costmap_nav" respawn="false" name="DWA_node" output="screen" required="true" clear_params="true">
    <rosparam file="/cdir/params/mb_flex_params.yaml" command="load" />
    <rosparam file="/cdir/params/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="/cdir/params/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="/cdir/params/dwa_local_planner_params_waffle.yaml" command="load" />
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
</node>

</group>

</launch>
