version: "3.9"

# ---------------------------------------------------------------------------------------
# ----------------- GENERATED FROM TEMPLATE docker-compose.yaml.jinja2 ------------------
# -------------------------------- DO NOT EDIT !-----------------------------------------
# ---------------------------------------------------------------------------------------
x-common-env: &common-env
    DISPLAY:
    NVIDIA_DRIVER_CAPABILITIES: all
    /tmp/.X11-unix: /tmp/.X11-unix:rw
    PYTHONPYCACHEPREFIX: /cdir/ws/pycache/
    ROSCONSOLE_FORMAT: "[${severity}] [${node}]: ${message}"
    GAZEBO_MODEL_PATH: /cdir/ws/src/gazebo_models

x-common-mounts: &common-mounts
    - ./.ros:/root/.ros
    - /dev:/dev
    - ./:/cdir
    - /home/.gazebo/models:/root/.gazebo/models
    {% for p in bind_paths -%}
    - {{p}}
    {% endfor %}

x-allow-gpu: &allow-gpu
    privileged: true
    deploy:
        resources:
            reservations:
                devices:
                    - driver: nvidia
                      count: 1
                      capabilities: [gpu]

x-common-ros-image: &common-ros-image
    image: ros-mower:core
    build: docker
    network_mode: host
    restart: no
    stop_grace_period: 1s
    working_dir: /cdir
    entrypoint: ""

x-depends-on-roscore: &depends-on-roscore
    roscore:
        condition: service_healthy

{% macro declare_ros_service(name, caller='') %}
    {{name}}:
        <<: [*common-ros-image, *allow-gpu]
        {{caller()}}
        environment:
            <<: *common-env
        volumes:
            *common-mounts
        depends_on:
            <<: *depends-on-roscore
{%- endmacro -%}

services:
    roscore:
        <<: *common-ros-image
        environment:
            <<: *common-env
        volumes:
            *common-mounts
        command: bash -c "./run_cmd.sh --inner roscore"
        profiles:
            - optional
            - backend_demo
        healthcheck:
            test: ["CMD", "curl", "http://localhost:11311"]
            interval: 2s
            timeout: 5s
            retries: 5

{%- call declare_ros_service('sim') %}
        command: bash -c "./run_all.sh --inner --sim"
        profiles:
            - optional
            - backend_demo
{%- endcall %}

{%- call declare_ros_service('rviz') %}
        command: bash -c "./run_all.sh --inner --rviz"
        profiles:
            - optional
{%- endcall %}

{%- call declare_ros_service('teleop') %}
        command: bash -c "./run_all.sh --inner --teleop"
        profiles:
            - optional
{%- endcall %}

{%- call declare_ros_service('backend') %}
        command: bash -c "./run_all.sh --inner backend:=true"
        profiles:
            - optional
            - backend_demo
{%- endcall %}

{%- call declare_ros_service('rosbridge') %}
        command: bash -c "./run_all.sh --inner --rosbridge"
        profiles:
            - optional
            - backend_demo
{%- endcall %}

    foxglove:
        image: foxglove:my
        build: studio
        restart: no
        profiles:
            - optional
            - backend_demo
        ports:
            - 8080:8080
