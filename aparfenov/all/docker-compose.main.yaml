# docker-compose.main.yaml - docker-compose template
# docker-compose.yaml - render of the template. Do not edit !

# continue declaration of &common-mounts from _dc-generated.yaml
    # - ./.ros:/root/.ros
    - ./:/cdir
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    - ~/.gazebo/models:/root/.gazebo/models

x-common-env: &common-env
    DISPLAY:
    NVIDIA_DRIVER_CAPABILITIES: all
    PYTHONPYCACHEPREFIX: /cdir/ws/pycache/
    PYTHONUNBUFFERED: 1
    ROSCONSOLE_FORMAT: "[$${severity}] [$${node}]: $${message}"
    GAZEBO_MODEL_PATH: /cdir/ws/src/gazebo_models

x-allow-gpu: &allow-gpu
    deploy:
        resources:
            reservations:
                devices:
                    - driver: nvidia
                      count: 1
                      capabilities: [gpu]

x-depends-on-roscore: &depends-on-roscore
    depends_on:
        roscore:
            condition: service_healthy

# шаблон сервиса, используещего образ ros-mower
x-ros-image-base: &ros-image-base
    image: ros-mower:mower-core
    build:
        dockerfile: docker/Dockerfile:mower-core
    network_mode: host
    restart: no
    stop_grace_period: 1s
    working_dir: /cdir
    entrypoint: ""
    environment:
        <<: *common-env
    volumes:
        *common-mounts

# шаблон клиента ros
x-ros-client-base: &ros-client-base
    <<: [*ros-image-base, *allow-gpu, *depends-on-roscore]

services:
    build:
        <<: *ros-image-base
        image: ros-mower:build
        build:
            dockerfile: docker/Dockerfile:build
        working_dir: /cdir/ws
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && catkin config \
            --extend /opt/ros/$$ROS_DISTRO \
            --cmake-args \
            -DCMAKE_BUILD_TYPE=Release
            && catkin build
            "
        profiles:
            - optional

    roscore:
        <<: *ros-image-base
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roscore"
        profiles:
            - optional
            - backend_demo
        healthcheck:
            test: ["CMD", "curl", "http://localhost:11311"]
            interval: 2s
            timeout: 2s
            retries: 40

    sim:
        <<: *ros-client-base
        image: ros-mower:mower-sim
        build:
            dockerfile: docker/Dockerfile:mower-sim
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch sim:=true $ROSARGS"
        profiles:
            - optional
            - backend_demo

    rviz:
        <<: *ros-client-base
        image: ros-mower:mower-gui
        build:
            dockerfile: docker/Dockerfile:mower-gui
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch rviz:=true $ROSARGS"
        profiles:
            - optional

    rqt:
        <<: *ros-client-base
        image: ros-mower:mower-gui
        build:
            dockerfile: docker/Dockerfile:mower-gui
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && rqt $ROSARGS"
        profiles:
            - optional

    teleop:
        <<: *ros-client-base
        # run with docker-compose run --rm teleop to attach console
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch teleop:=true $ROSARGS"
        profiles:
            - optional

    backend:
        <<: *ros-client-base
        image: ros-mower:google
        build:
            dockerfile: docker/Dockerfile:google
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch backend:=true $ROSARGS"
        profiles:
            - optional
            - backend_demo

    planning:
        <<: *ros-client-base
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch planning:=true $ROSARGS"
        profiles:
            - optional
            - backend_demo

    costmap_demo:
        <<: *ros-client-base
        image: ros-mower:pytorch
        build:
            dockerfile: docker/Dockerfile:pytorch
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch costmap_demo:=true segm:=true segm_net:=true ddr_net:=false $ROSARGS"
        profiles:
            - optional
            - costmap_demo

    bridge:
        <<: *ros-client-base
        image: ros-mower:bridge
        build:
            dockerfile: docker/Dockerfile:bridge
        command: >
            bash -c ". /opt/ros/$$ROS_DISTRO/setup.bash
            && . /cdir/ws/devel/setup.bash
            && roslaunch /cdir/all.launch rosbridge:=true $ROSARGS"
        profiles:
            - optional
            - backend_demo

    foxglove:
        image: foxglove:my
        build: studio
        restart: no
        profiles:
            - optional
            - backend_demo
        ports:
            - 8080:8080
