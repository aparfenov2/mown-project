<launch>

    <arg name="rviz" default="false" />
    <arg name="loca" default="false" />
    <arg name="teleop" default="false" />
    <arg name="sim" default="false" />
    <arg name="segm" default="false" />
    <arg name="segm_bypass" default="false" />
    <arg name="mb" default="false" />
    <arg name="world" default="turtletown" />

<!-- sim -->
    <group if="$(arg sim)">
        <include file="$(find tb_gazebo)/launch/turtletown.launch">
            <arg name="publish_tf" value="1" />
            <arg name="world" value="$(arg world)"/>
        </include>
    </group>

<!-- rviz -->
    <group if="$(arg rviz)">
        <node pkg="rviz" type="rviz" name="rviz"
            args="-d $(find my_utils_common)/rviz/cfg.rviz"/>
    </group>

<!-- teleop -->
    <group if="$(arg teleop)">
        <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop" output="screen">
            <remap from="cmd_vel" to="/mobile_base/commands/velocity"/>
        </node>
    </group>

<!-- segm -->
    <group if="$(arg segm)">
        <group unless="$(arg bypass)">
            <node name="segmentation_node" pkg="ddrnet" type="ddrnet" output="screen">
                <param name="weights_file" value="$(find ddrnet)/model/DDRNet_CS.engine" />
                <remap from="camera/image" to="/camera/rgb/image_raw" />
            </node>
        </group>

        <node pkg="nodelet" type="nodelet" name="pcl_proc"  args="manager" output="screen"/>

        <!-- register depth image -->
        <node pkg="nodelet" type="nodelet" name="point_cloud2_register"
                args="load depth_image_proc/register pcl_proc"
          respawn="false" output="screen" >
            <remap from="/rgb/camera_info" to="/camera/rgb/camera_info" />
            <remap from="/depth/camera_info" to="/camera/depth/camera_info" />
            <remap from="/depth/image_rect" to="/camera/depth/image_raw" />
        </node>

        <!-- registered depth to pcl rgb -->
        <node pkg="nodelet" type="nodelet" name="point_cloud2_pcl"
                args="load depth_image_proc/point_cloud_xyzrgb pcl_proc"
          respawn="false" output="screen" >

            <remap from="/rgb/image_rect_color" to="$(arg image_rect_topic)" />
            <remap from="/rgb/camera_info" to="/camera/rgb/camera_info" />
            
            <remap from="depth_registered/points" to="/pcl_proc/points2" />
        </node>

        <node name="color_filter" pkg="simpcl" type="color_filter" output="screen">
            <remap from="points_in" to="/pcl_proc/points2"/>
            <remap from="points_out" to="/pcl_proc/filtered"/>
            
            <param name="use_hsi" type="int" value="0"/>
            
            <param name="r_min" type="double" value="255"/>
            <param name="r_max" type="double" value="255"/>

            <param name="g_min" type="double" value="232"/>
            <param name="g_max" type="double" value="255"/>

            <param name="b_min" type="double" value="0"/>
            <param name="b_max" type="double" value="20"/>
        </node>

        <node pkg="nodelet" type="nodelet" name="point_cloud2_laserscan"
                args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet pcl_proc"
          respawn="false" output="screen" required="true" clear_params="true">
            <param name="min_height" type="double" value="0.1"/>
            <param name="max_height" type="double" value="2.0"/>
            <param name="target_frame" type="str" value="base_link"/>
            
            <remap from="cloud_in" to="/pcl_proc/filtered" />
            <remap from="scan" to="/pcl_proc/scan" />            
        </node>

    </group>

<!-- loca -->
<!--     <group if="$(arg loca)">
        <include file="$(find aloam_velodyne)/launch/aloam_velodyne_HDL_32.launch">
            <arg name="rviz" value="false" />
            <arg name="output" value="log" />
        </include>

        <node pkg="tf" type="static_transform_publisher" name="odom_to_camera_init" args="0 0 0 0 0 0 1 odom camera_init 100" />
        <node pkg="tf" type="static_transform_publisher" name="aft_mapped_to_base_footprint" args="0 0 0 0 0 0 1 aft_mapped base_footprint 100" />
    </group>
 -->

  <!-- move_base -->
    <group if="$(arg mb)">
      <arg name="model" default="waffle_pi" doc="model type [burger, waffle, waffle_pi]"/>
      <arg name="cmd_vel_topic" default="/mobile_base/commands/velocity" />
      <arg name="odom_topic" default="odom" />
      <arg name="move_forward_only" default="false"/>

      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" clear_params="true">
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find my_utils_common)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find my_utils_common)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find my_utils_common)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find my_utils_common)/param/global_costmap_params.yaml" command="load" />
        <!-- <rosparam file="$(find my_utils_common)/param/move_base_params.yaml" command="load" /> -->
        <rosparam file="$(find my_utils_common)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
        <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
        <remap from="odom" to="$(arg odom_topic)"/>
        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
      </node>
    </group>


</launch>
