<launch>
    <arg name="rviz" default="false" />
    <arg name="loca" default="false" />
    <arg name="teleop" default="false" />
    <arg name="sim" default="false" />
    <arg name="reset_sim" default="false" />
    <arg name="segm" default="false" />
    <arg name="segm_net" default="false" />
    <arg name="planning" default="false"/>
    <arg name="mb" default="false" />
    <arg name="paused" default="false" />
    <arg name="world" default="agriculture" />
    <arg name="robot" default="turtlebot" />
    <arg name="cmd_vel_topic" value="/mobile_base/commands/velocity" if="$(eval robot == 'turtlebot')" />
    <arg name="odom_topic" value="/odom" if="$(eval robot == 'turtlebot')" />
    <arg name="cmd_vel_topic" value="/cmd_vel" if="$(eval robot == 'turtlebot3')" />
    <arg name="odom_topic" value="/odom" if="$(eval robot == 'turtlebot3')" />
    <!-- <arg name="cmd_vel_topic" value="/engix_velocity_controller/cmd_vel" if="$(eval robot == 'ya_model')" />
    <arg name="odom_topic" value="/engix_velocity_controller/odom" if="$(eval robot == 'ya_model')" /> -->
    <arg name="cmd_vel_topic" value="/cmd_vel" if="$(eval robot == 'ya_model')" />
    <arg name="odom_topic" value="/odom" if="$(eval robot == 'ya_model')" />
    <arg name="use_sim_time_in_gazebo" value="true"/>
    <arg name="base_frame" value="base_link" if="$(eval robot == 'ya_model')" />
    <arg name="rosbridge" default="false" />
    <arg name="rosbridge_port" default="8088" />
    <arg name="command_panel" default="false" />
    <!-- rtabmap is supposed to be used in sim mode only to provide global merged pointcloud. In real robot ZED2 already provides the cloud. -->
    <arg name="rtabmap" default="false" />
    <arg name="backend" default="false" />

    <!-- sim -->
    <group if="$(arg sim)">
        <arg name="publish_tf" default="1"/>

        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="use_sim_time" value="$(arg use_sim_time_in_gazebo)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="debug" value="false"/>
            <arg name="gui" value="true"/>
            <arg name="world_name" value="$(find my_utils_common)/worlds/$(arg world).world"/>
        </include>


        <group if="$(eval robot == 'ya_model')">
            <!-- <arg name="robot_namespace" default="/"/> -->
            <include file="$(find engix_description)/launch/description.launch" />

            <!-- <include file="$(find engix_gazebo)/launch/spawn_engix.launch"/> -->

            <!-- Load controller configuration -->
            <!-- <rosparam command="load" file="$(find engix_control)/config/controller.yaml" /> -->

            <!-- Spawn controllers -->
            <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="engix_joint_publisher engix_velocity_controller">
            </node>

            <!-- <node name="message_to_tf" pkg="message_to_tf" type="message_to_tf">
                <param name="odometry_topic" value="ground_truth/state"/>
                <param name="frame_id" value="odom"/>
                <param name="child_frame_id" value="base_link"/>
            </node> -->
        </group>

        <group if="$(eval robot == 'turtlebot')">
            <arg name="urdf_file" default="$(find xacro)/xacro '$(find tb_gazebo_description)/robots/kobuki_hexagons_kinect.urdf.xacro' publish_tf:=$(arg publish_tf)"/>
            <param name="robot_description" command="$(arg urdf_file)"/>
        </group>

        <group if="$(eval robot == 'turtlebot3')">
            <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_waffle.urdf.xacro publish_tf:=$(arg publish_tf)" />
        </group>

        <!-- Gazebo model spawner -->
        <group if="$(eval world == 'empty')">
            <node args="-urdf -x 0 -y 0 -z 0 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'playpen')">
            <node args="-urdf -x 0 -y 0 -z 0 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'agriculture')">
            <node args="-urdf -x 0 -y 0 -z 0.5 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'yosemite')">
            <node args="-urdf -x 0 -y 0 -z 0.5 -Y 0 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'turtletown')">
            <node args="-urdf -x 5.5 -y -5.7 -z 1.2 -Y 3.14 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <group if="$(eval world == 'baylands')">
            <node args="-urdf -x 0 -y 0 -z 0.21 -param robot_description -model mobile_base" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
        </group>
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" type="double" value="30.0"/>
        </node>
        <!-- <node args="/mobile_base/sensors/imu_data /mobile_base/sensors/imu_data_raw" name="imu_relay" pkg="topic_tools" type="relay"/> -->
    </group>
    <group if="$(arg reset_sim)">
        <node pkg="rosservice" type="rosservice" name="reset_pos" args="call --wait /gazebo/reset_simulation" />
    </group>
    <!-- rviz -->
    <group if="$(arg rviz)">
        <node args="-d $(find my_utils_common)/rviz/cfg.rviz" name="rviz" pkg="rviz" type="rviz" respawn="true"/>
    </group>
    <!-- teleop -->
    <group if="$(arg teleop)">
        <node name="teleop" output="screen" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py">
            <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
        </node>
    </group>


    <!-- segm_net -->
    <group if="$(arg segm_net)">
        <node name="segmentation_node" pkg="ddrnet" type="ddrnet" output="screen">
            <param name="weights_file" value="$(find ddrnet)/model/DDRNet_CS.engine" />
            <remap from="camera/image" to="/camera/rgb/image_raw" />
        </node>
    </group>

    <!-- segm, depends on segm_net -->
    <group if="$(arg segm)">

        <node pkg="nodelet" type="nodelet" name="pcl_proc" args="manager" output="screen"/>

        <!-- register depth image -->
        <node pkg="nodelet" type="nodelet" name="point_cloud2_register" args="load depth_image_proc/register pcl_proc" respawn="false" output="screen">
            <remap from="/rgb/camera_info" to="/camera/rgb/camera_info" />
            <remap from="/depth/camera_info" to="/camera/depth/camera_info" />
            <remap from="/depth/image_rect" to="/camera/depth/image_raw" />
        </node>

        <!-- registered depth to pcl rgb -->
        <node pkg="nodelet" type="nodelet" name="point_cloud2_pcl" args="load depth_image_proc/point_cloud_xyzrgb pcl_proc" respawn="false" output="screen">
            <!-- depth input: depth_registered/image_rect -->
            <remap from="/rgb/image_rect_color" to="/segmentation_node/mask_color" />
            <remap from="/rgb/camera_info" to="/camera/rgb/camera_info" />

            <remap from="depth_registered/points" to="/pcl_proc/points2" />
        </node>
        <!--
        <node name="color_filter" pkg="simpcl" type="color_filter" output="screen">
            <remap from="points_in" to="/pcl_proc/points2"/>
            <remap from="points_out" to="/pcl_proc/filtered"/>

            <param name="use_hsi" type="int" value="0"/>

            <param name="r_min" type="double" value="32"/>
            <param name="r_max" type="double" value="32"/>

            <param name="g_min" type="double" value="0"/>
            <param name="g_max" type="double" value="0"/>

            <param name="b_min" type="double" value="0"/>
            <param name="b_max" type="double" value="0"/>
        </node>

        <node pkg="nodelet" type="nodelet" name="point_cloud2_laserscan" args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet pcl_proc" respawn="false" output="screen" required="true" clear_params="true">
            <param name="min_height" type="double" value="0.1"/>
            <param name="max_height" type="double" value="2.0"/>
            <param name="target_frame" type="str" value="base_link"/>

            <remap from="cloud_in" to="/pcl_proc/filtered" />
            <remap from="scan" to="/pcl_proc/scan" />
        </node>
 -->
    </group>

    <!-- loca -->
    <group if="$(arg loca)">
        <!--
        <include file="$(find aloam_velodyne)/launch/aloam_velodyne_HDL_32.launch">
            <arg name="rviz" value="false" />
            <arg name="output" value="log" />
        </include>

        <node pkg="tf" type="static_transform_publisher" name="odom_to_camera_init" args="0 0 0 0 0 0 1 odom camera_init 100" />
        <node pkg="tf" type="static_transform_publisher" name="aft_mapped_to_base_footprint" args="0 0 0 0 0 0 1 aft_mapped base_footprint 100" />
 -->
        <!-- provides odom frame, didn't try with turtlebot -->
        <group if="$(eval robot == 'ya_model')">
            <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
                <rosparam command="load" file="$(find engix_control)/config/localization.yaml" />
                <!-- <remap from="/imu/data" to="/mobile_base/sensors/imu_data"/> -->
            </node>
        </group>

    </group>


    <!-- move_base -->
    <group if="$(arg mb)">
        <group unless="$(arg segm)">
            <node args="manager" name="pcl_proc" output="screen" pkg="nodelet" type="nodelet"/>
            <node args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet pcl_proc" clear_params="true" name="point_cloud2_laserscan" output="screen" pkg="nodelet" required="true" respawn="false" type="nodelet">
                <param name="min_height" type="double" value="0.1"/>
                <param name="max_height" type="double" value="2.0"/>
                <param name="target_frame" type="str" value="base_link"/>
                <remap from="cloud_in" to="ce30_output"/>
                <remap from="scan" to="/pcl_proc/scan"/>
            </node>
        </group>
        <!-- Arguments -->
        <arg name="move_forward_only" default="false"/>
        <arg name="coverage_area_offset" default="-2.5 -2.5 0 0 0 0"/>
        <arg name="coverage_area_size_x" default="10" />
        <arg name="coverage_area_size_y" default="10" />
        <arg name="target_x_vel" default="0.5" />
        <arg name="target_yaw_vel" default="0.4" />
        <arg name="robot_radius" default="0.3" />
        <arg name="tool_radius" default="0.3"/>

        <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" clear_params="true">
            <param name="base_global_planner" value="full_coverage_path_planner/SpiralSTC"/>
            <param name="base_local_planner" value="tracking_pid/TrackingPidLocalPlanner"/>

            <rosparam command="load" file="$(find my_utils_common)/param/local_costmap_params.yaml" ns="local_costmap"/>
            <rosparam command="load" file="$(find my_utils_common)/param/global_costmap_params.yaml" ns="global_costmap"/>

            <param name="global_costmap/robot_radius" value="$(arg robot_radius)"/>
            <param name="local_costmap/robot_radius" value="$(arg robot_radius)"/>
            <param name="global_costmap/robot_base_frame" value="$(arg base_frame)"/>
            <param name="local_costmap/robot_base_frame" value="$(arg base_frame)"/>

            <param name="SpiralSTC/robot_radius" value="$(arg robot_radius)"/>
            <param name="SpiralSTC/tool_radius" value="$(arg tool_radius)"/>

            <!-- <remap from="move_base_simple/goal" to="/fake_move_base/goal"/> -->
            <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
            <!-- <remap from="/local_trajectory" to="/trajectory"/> -->

            <param name="TrackingPidLocalPlanner/controller_debug_enabled" value="True"/>
            <param name="TrackingPidLocalPlanner/track_base_link" value="true"/>
            <param name="TrackingPidLocalPlanner/l" value="0.5"/>
            <param name="TrackingPidLocalPlanner/Ki_long" value="0.0"/>
            <param name="TrackingPidLocalPlanner/Kp_long" value="2.0"/>
            <param name="TrackingPidLocalPlanner/Kd_long" value="0.5"/>
            <param name="TrackingPidLocalPlanner/Ki_lat" value="0.0"/>
            <param name="TrackingPidLocalPlanner/Kp_lat" value="4.0"/>
            <param name="TrackingPidLocalPlanner/Kd_lat" value="0.3"/>
            <param name="TrackingPidLocalPlanner/target_x_vel" value="$(arg target_x_vel)"/>
            <param name="TrackingPidLocalPlanner/target_yaw_vel" value="$(arg target_yaw_vel)"/>

        </node>

        <node args="0 0 0 0 0 0 odom map 100" name="odom_to_map" pkg="tf" type="static_transform_publisher"/>
        <!-- Launch coverage progress tracking -->
        <!--     <node args="$(arg coverage_area_offset) map coverage_map 100" name="map_to_coveragemap" pkg="tf" type="static_transform_publisher"/>
    <node name="coverage_progress" pkg="full_coverage_path_planner" type="coverage_progress">
        <param name="~target_area/x" value="$(arg coverage_area_size_x)"/>
        <param name="~target_area/y" value="$(arg coverage_area_size_y)"/>
        <param name="~coverage_radius" value="$(arg tool_radius)"/>
        <remap from="reset" to="coverage_progress/reset"/>
        <param name="~map_frame" value="/coverage_map"/>
    </node>
 -->

        <node pkg="exploration_server" type="plugin_client" name="plugin_client" output="screen"/>
        <node pkg="my_utils_common" type="polygon_layer_helper.py" name="exploration_server_node" output="screen">
            <remap from="/set_polygon" to="/move_base/global_costmap/polygon_layer/set_polygon"/>
        </node>

    </group>

    <!-- planning system -->
    <group if="$(arg planning)">
        <!-- <rosparam command="load" file="$(find my_utils_common)/param/planning_stack_params.yaml" ns="planner" /> -->

        <!-- <include file="$(find move_base_mod)/launch/move_base.launch">
            <arg name="cmd_vel_topic" value="/mobile_base/commands/velocity" />
            <arg name="odom_topic" value="odom" />
        </include> -->

        <include file="$(find engix_planning)/launch/planning.launch">
            <arg name="robot" value="$(arg robot)" />
        </include>

        <include file="$(find my_utils_common)/launch/map.launch"/>

        <param name="planner/topics/velocity_commands" value="$(arg cmd_vel_topic)"/>
        <!-- <include file="$(find route_util)/launch/utils.launch"/> -->
        <!-- <include file="$(find mapping)/launch/run.launch"/> -->

        <!-- Run the costmap node -->
        <!-- <node name="costmap_node" pkg="costmap_2d" type="costmap_2d_node"> -->
        <!-- <rosparam file="$(find my_utils_common)/param/global_costmap_params_test.yaml" command="load" ns="costmap" /> -->
        <!-- <rosparam file="$(find my_utils_common)/param/global_costmap_params.yaml" command="load" ns="costmap" /> -->
        <!-- </node>    -->
    </group>

    <!-- Command panel -->
    <group if="$(arg command_panel)">
        <include file="$(find command_panel)/launch/run.launch"/>
    </group>

    <group if="$(arg backend)">
        <node pkg="backend" type="backend.py" name="backend" output="screen" />
    </group>

    <!-- ROSBRIDGE -->
    <group if="$(arg rosbridge)">
        <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">
            <arg name="port" value="$(arg rosbridge_port)"/>
        </include>
    </group>

    <group ns="rtabmap" if="$(arg rtabmap)">

        <!-- http://wiki.ros.org/rtabmap_ros/Tutorials/SetupOnYourRobot -->

        <arg name="database_path" default="rtabmap.db"/>
        <arg name="rgbd_odometry" default="false"/>
        <arg name="rtabmapviz" default="false"/>
        <arg name="localization" default="false"/>

        <arg unless="$(arg localization)" name="args" default="--delete_db_on_start"/>
        <arg name="simulation" default="true"/>
        <arg if="$(arg simulation)" name="rgb_topic" default="/camera/rgb/image_raw"/>
        <arg unless="$(arg simulation)" name="rgb_topic" default="/camera/rgb/image_rect_color"/>
        <arg if="$(arg simulation)" name="depth_topic" default="/camera/depth/image_raw"/>
        <arg unless="$(arg simulation)" name="depth_topic" default="/camera/depth_registered/image_raw"/>
        <arg name="camera_info_topic" default="/camera/rgb/camera_info"/>
        <arg name="rtmap_odom_topic_out" default="vo_out"/>
        <arg unless="$(arg rgbd_odometry)" name="rtmap_odom_topic" default="$(arg odom_topic)" />
        <arg if="$(arg rgbd_odometry)" name="rtmap_odom_topic" default="odometry/filtered" />

      <!-- Fake laser -->
        <!-- <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
        <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
            args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
            <param name="scan_height" value="10"/>
            <param name="output_frame_id" value="/camera_depth_frame"/>
            <param name="range_min" value="0.45"/>
            <remap from="image" to="$(arg depth_topic)"/>
            <remap from="scan" to="/scan"/>
        </node> -->

        <!-- RTABmap -->
        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)" clear_params="true" launch-prefix="">
            <rosparam command="load" file="$(find my_utils_common)/param/rtabmap_sim.yaml" />

            <remap from="rgb/image" to="$(arg rgb_topic)"/>
            <remap from="depth/image" to="$(arg depth_topic)"/>
            <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>

            <remap from="grid_map" to="map" />
            <remap from="odom" to="$(arg rtmap_odom_topic)"/>
            <remap from="scan" to="/scan"/>
            <!-- <remap from="scan_cloud" to="/velodyne_points"/> -->

            <param if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
            <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
            <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
        </node>

        <!-- visualization with rtabmapviz -->
        <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" clear_params="true" output="screen">
            <rosparam command="load" file="$(find my_utils_common)/param/rtabmap_sim.yaml" />

            <remap from="odom" to="$(arg rtmap_odom_topic)" />
            <remap from="rgb/image" to="$(arg rgb_topic)"/>
            <remap from="depth/image" to="$(arg depth_topic)"/>
            <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
            <remap from="scan" to="/scan"/>
            <!-- <remap from="scan_cloud" to="/velodyne_points"/> -->
        </node>

    </group>

</launch>
