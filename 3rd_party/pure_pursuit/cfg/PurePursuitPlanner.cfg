#!/usr/bin/env python
# FTC Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

gen.add("rotation_accuracy", double_t, 0, "Accuracy of the orientation to the goal orientation.", 0.1, 0, 3.14)

gen.add("position_accuracy", double_t, 0, "Maximal distance to the goal position.", 0.1, 0, 0.5)

gen.add("max_rotation_vel", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s.", 0.8, 0, 20.0)

gen.add("min_rotation_vel", double_t, 0, "The absolute value of the minimum rotational velocity for the robot in rad/s.", 0.2, 0, 20.0)

gen.add("max_x_vel", double_t, 0, "The maximum x velocity for the robot in m/s.", 0.05, 0, 20.0)

gen.add("sim_time", double_t, 0, "The time in seconds which look along the global plan with maximal velocity, to calulate the path.", 0.4, 0, 20.0)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

gen.add("acceleration_x", double_t, 0, "The acceleration limit of the robot in the x direction.", 0.1, 0, 10.0)

gen.add("acceleration_z", double_t, 0, "The acceleration limit of the robot for rotation.", 0.1, 0, 10.0)

gen.add("slow_down_factor", double_t, 0, "Factor to scale when the robot should slow down by in place rotation.", 1, 0, 10.0)

gen.add("local_planner_frequence", double_t, 0, "Need to set to the same value as the local planner frequence (controller frequence) in move base.", 10, 0, 100.0)

gen.add("join_obstacle", bool_t, 0, "If true, local and global costmaps are joined. Local obstacle will bypass.", True)

exit(gen.generate("pure_pursuit_local_planner", "pure_pursuit_local_planner", "PurePursuitPlanner"))
