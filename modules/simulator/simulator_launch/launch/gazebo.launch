<launch>
    <arg name="world" default="agriculture"/>
    <arg name="robot" default="turtlebot"/>
    <arg name="use_sim_time_in_gazebo" default="True"/>

    <arg name="odometry_source" default="WORLD"/>

    <arg name="publish_tf" default="1"/>
    <arg name="gui" default="true"/>
    <param name="use_sim_time" command="true"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="use_sim_time" value="$(arg use_sim_time_in_gazebo)"/>
        <arg name="world_name" value="$(find engix_gazebo)/worlds/$(arg world).world"/>
        <arg name="gui" value="$(arg gui)"/>
    </include>

    <group if="$(eval robot == 'turtlebot')">
        <arg name="urdf_file" default="$(find xacro)/xacro $(find tb_gazebo_description)/robots/kobuki_hexagons_kinect.urdf.xacro publish_tf:=$(arg publish_tf) prefix:=$(arg robot) odometry_source:=$(arg odometry_source)"/>
        <param name="robot_description" command="$(arg urdf_file)"/>
        <param name="tf_prefix" value="$(arg robot)"/>
    </group>

    <!-- Gazebo model spawner -->
    <group if="$(eval world == 'empty')">
        <node args="-urdf -x 0 -y 0 -z 0 -Y 0 -param robot_description -model mobile_base -robot_namespace $(arg robot)" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
    </group>
    <group if="$(eval world == 'playpen')">
        <node args="-urdf -x 0 -y 0 -z 0 -Y 0 -param robot_description -model mobile_base -robot_namespace $(arg robot)" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
    </group>
    <group if="$(eval world == 'agriculture')">
        <node args="-urdf -x 0 -y 0 -z 0.5 -Y 0 -param robot_description -model mobile_base -robot_namespace $(arg robot)" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
    </group>
    <group if="$(eval world == 'yosemite')">
        <node args="-urdf -x 0 -y 0 -z 0.5 -Y 0 -param robot_description -model mobile_base -robot_namespace $(arg robot)" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
    </group>
    <group if="$(eval world == 'turtletown')">
        <node args="-urdf -x 5.5 -y -5.7 -z 1.2 -Y 3.14 -param robot_description -model mobile_base -robot_namespace $(arg robot)" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
    </group>
    <group if="$(eval world == 'baylands')">
        <node args="-urdf -x 0 -y 0 -z 0.21 -param robot_description -model mobile_base -robot_namespace $(arg robot)" name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"/>
    </group>

    <node pkg="tf" type="static_transform_publisher" name="tb_odom_to_odom" args="0 0 0 0 0 0 1 turtlebot/odom odom 10" />
    <node pkg="tf" type="static_transform_publisher" name="tb_footprint_to_footprint" args="0 0 0 0 0 0 1 turtlebot/base_footprint base_footprint 10" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <!-- <param name="base_frame" value="$(arg name)/base_link"/>
      <param name="tf_prefix" value="$(arg name)"/> -->
      
    </node>

    <node name="gazebo_bridge_localization" pkg="gazebo_bridge_localization" type="turtlebot_tf_localization.py" output="screen">
        <rosparam command="load" file="$(find gazebo_bridge_localization)/params/config.yaml" />
    </node>

</launch>
