################################################################################
#
# TODO: what is the difference between parameters: max_vel_x and max_trans_vel??
# or since the the values are different min_vel_x and min_trans_vel???
#
#
# from tuning document about DWA local planner tuning: VELOCITY SAMPLES:
# Velocity samples Among other parameters, vx sample, vy sample determine how
# many translational velocity samples to take in x, y direction. vth sample 
# controls the number of rotational velocities samples. The number of samples 
# you would like to take depends on how much computation power you have. In 
# most cases we prefer to set vth samples to be higher than translational 
# velocity samples, because turning is generally a more complicated condition 
# than moving straight ahead. If you set max vel y to be zero, there is no 
# need to have velocity samples in y direction since there will be no usable 
# samples. We picked vx sample = 20, and vth samples = 40.

controller_frequency: 5.0
recovery_behaviour_enabled: true

# the recommended local planner. For parameter descriptions see:
# https://wiki.ros.org/dwa_local_planner?distro=melodic
DWAPlannerROS:
  ##-------------------------------ACCEL & VELOCITY-----------------------------
  # The x acceleration limit of the robot in meters/sec^2  
  acc_lim_x: 0.8 #MO tuned. Assuming a linear accel to 0.8m/sec max velocity.
  #Since we cannot move in Y direction, keep at 0 to eliminate uselss computation.
  acc_lim_y: 0 #MO tuned. jimmy cannot move in y direction (it's not holomonic)
  #how fast can we get to out top rotational velocity of 2PI/3 radians/sec
  acc_lim_th: 2.094395 #MO tuned. Assuming a linear accel to 2PI/3 rad/sec max velocity.

  max_vel_x: 0.4 #MO tuned to reflext jimmy linear speed.
  min_vel_x: 0.2 #MO tuned
  max_vel_y: 0 #MO tuned. jimmy cannot move in y direction (it's not holomonic)
  min_vel_y: 0 #MO tuned. jimmy cannot move in y direction (it's not holomonic)

  #The absolute value of the maximum translational velocity for the robot in m/s 
  max_vel_trans: 0.3 #MO - absolute top speed of straight motion.
  min_vel_trans: 0.1 #MO - I guess not zero so that any given command is motion.
  max_vel_theta: 2.094395 #MO tuned - 1/3 of a circle per sec top speed.
  min_vel_theta: 0.2 #MO Tuned - I guess not zero so that any given command is motion.


  # ------------------------Trajectory scoring parameters-----------------------
  # path_distance_bias is the weight for how much the local planner should stay 
  # close to the global path 3 . A high value will make the local planner prefer 
  # trajectories on global path.
  path_distance_bias: 32.0 #MO tuned (but it is also the default)

  #goal distance bias is the weight for how much the robot should attempt to 
  # reach the local goal, with whatever path. Experiments show that increasing 
  # goal distance bias enables the robot to be less attached to the global path
  goal_distance_bias: 20.0 #MO tuned

  #occdist scale is the weight for how much the robot should attempt to avoid 
  # obstacles. A high value for this parameter results in indecisive robot that 
  # stucks in place.
  occdist_scale: 0.02 #MO tuned

  #The absolute value of the velocity at which to start scaling the robot's 
  # footprint, in m/s 
  scaling_speed: 0.25 #Mo tuned but is default value.

  #The maximum factor to scale the robot's footprint by 
  max_scaling_factor: 0.2 #MO tuned but is default.

  # The distance from the center point of the robot to place an additional 
  # scoring point, in meters 
  forward_point_distance: 0.6 #MO tuned but is default

  # The amount of time that the robot must stop before a collision in order for 
  # a trajectory to be considered valid in seconds 
  stop_time_buffer: 0.2


  #-------------------------Goal Tolerance Parameters-------------------------
  # The tolerance in radians for the controller in yaw/rotation when achieving 
  # its goal 
  yaw_goal_tolerance: 0.05 #MO tuned, but is default.

  # The tolerance in meters for the controller in the x & y distance when 
  # achieving a goal 
  xy_goal_tolerance: 0.20 #MO tuned, default is 0.10.

  # If goal tolerance is latched, if the robot ever reaches the goal xy location 
  # it will simply rotate in place, even if it ends up outside the goal 
  # tolerance while it is doing so. 
  latch_xy_goal_tolerance: false

  #---------------------------Forward Simulation Parameters---------------------
  # The amount of time to forward-simulate trajectories in seconds. default of 
  # 1.7 seconds.
  sim_time: 4.0 #MO Tuned

  # The step size, in meters, to take between points on a given trajectory in meters.
  sim_granularity: 0.02 #MO tuned

  #The number of samples to use when exploring the x velocity space 
  vx_samples: 20 #MO tuned

  #The number of samples to use when exploring the y velocity space 
  vy_samples: 0 #MO agreed :-)

  #The number of samples to use when exploring the theta velocity space 
  vtheta_samples: 40 #MO tuned

  #------------------------Oscillation Prevention Parameters--------------------
  # How far the robot must travel in meters 
  # before oscillation flags are reset 
  oscillation_reset_dist: 0.05 #MO tuned

TrajectoryPlannerROS:
  # Robot Configuration Parameters
  acc_lim_x: 2.5
  acc_lim_theta:  3.2

  max_vel_x: 1.0
  min_vel_x: 0.0

  max_vel_theta: 1.0
  min_vel_theta: -1.0
  min_in_place_vel_theta: 0.2

  holonomic_robot: false
  escape_vel: -0.1

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1
  xy_goal_tolerance: 0.2
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters
  sim_time: 2.0
  sim_granularity: 0.02
  angular_sim_granularity: 0.02
  vx_samples: 6
  vtheta_samples: 20
  controller_frequency: 20.0

  # Trajectory scoring parameters
  meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
  occdist_scale:  0.1 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
  # pdist_scale: 0.75  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
  # gdist_scale: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8
  path_distance_bias: 0.75  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
  goal_distance_bias: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8

  heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
  heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
  dwa: true #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  simple_attractor: false
  publish_cost_grid_pc: true  

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.25 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
  escape_reset_dist: 0.1
  escape_reset_theta: 0.1